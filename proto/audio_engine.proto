syntax = "proto3";

package audio_engine;

// Service definition for audio engine operations
service AudioEngine {
    // Load an audio file for processing
    rpc LoadFile(LoadFileRequest) returns (LoadFileResponse);

    // Render audio with streaming progress updates
    rpc Render(RenderRequest) returns (stream RenderResponse);

    // Update EDL (Edit Decision List) - placeholder for future implementation
    rpc UpdateEdl(UpdateEdlRequest) returns (UpdateEdlResponse);

    // Subscribe to events - placeholder for future implementation
    rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse);
}

// LoadFile messages
message LoadFileRequest {
    string file_path = 1;
}

message LoadFileResponse {
    bool success = 1;
    string message = 2;
    optional FileInfo file_info = 3;
}

message FileInfo {
    string path = 1;
    double duration_seconds = 2;
    int32 sample_rate = 3;
    int32 num_channels = 4;
    int64 file_size_bytes = 5;
}

// Render messages
message RenderRequest {
    string input_file = 1;
    string output_file = 2;
    optional double start_time = 3;  // Start time in seconds
    optional double duration = 4;    // Duration in seconds
    optional RenderSettings settings = 5;
}

message RenderSettings {
    int32 sample_rate = 1;
    int32 bit_depth = 2;
    string format = 3;  // "wav", "aiff", etc.
}

message RenderResponse {
    oneof response_type {
        RenderProgress progress = 1;
        RenderComplete complete = 2;
        RenderError error = 3;
    }
}

message RenderProgress {
    double progress_percentage = 1;  // 0.0 to 100.0
    string status_message = 2;
    optional double elapsed_seconds = 3;
    optional double estimated_remaining_seconds = 4;
}

message RenderComplete {
    string output_file_path = 1;
    string sha256_hash = 2;
    double total_duration_seconds = 3;
    int64 output_file_size_bytes = 4;
}

message RenderError {
    string error_code = 1;
    string error_message = 2;
    optional string stack_trace = 3;
}

// UpdateEdl messages (placeholder - returns UNIMPLEMENTED)
message UpdateEdlRequest {
    string edl_data = 1;
}

message UpdateEdlResponse {
    bool success = 1;
    string message = 2;
}

// Subscribe messages (placeholder - returns UNIMPLEMENTED)
message SubscribeRequest {
    repeated string event_types = 1;
}

message SubscribeResponse {
    string event_type = 1;
    string event_data = 2;
    int64 timestamp = 3;
}